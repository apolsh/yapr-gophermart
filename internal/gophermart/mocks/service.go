// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apolsh/yapr-gophermart/internal/gophermart/service (interfaces: UserStorage,OrderStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/apolsh/yapr-gophermart/internal/gophermart/dto"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserStorage) Get(arg0 context.Context, arg1 string) (dto.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserStorage)(nil).Get), arg0, arg1)
}

// NewUser mocks base method.
func (m *MockUserStorage) NewUser(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockUserStorageMockRecorder) NewUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUserStorage)(nil).NewUser), arg0, arg1, arg2)
}

// MockOrderStorage is a mock of OrderStorage interface.
type MockOrderStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStorageMockRecorder
}

// MockOrderStorageMockRecorder is the mock recorder for MockOrderStorage.
type MockOrderStorageMockRecorder struct {
	mock *MockOrderStorage
}

// NewMockOrderStorage creates a new mock instance.
func NewMockOrderStorage(ctrl *gomock.Controller) *MockOrderStorage {
	mock := &MockOrderStorage{ctrl: ctrl}
	mock.recorder = &MockOrderStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStorage) EXPECT() *MockOrderStorageMockRecorder {
	return m.recorder
}

// CreateWithdraw mocks base method.
func (m *MockOrderStorage) CreateWithdraw(arg0 context.Context, arg1 string, arg2 dto.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockOrderStorageMockRecorder) CreateWithdraw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockOrderStorage)(nil).CreateWithdraw), arg0, arg1, arg2)
}

// GetAllUnfinishedAccrualOrderNums mocks base method.
func (m *MockOrderStorage) GetAllUnfinishedAccrualOrderNums(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnfinishedAccrualOrderNums", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnfinishedAccrualOrderNums indicates an expected call of GetAllUnfinishedAccrualOrderNums.
func (mr *MockOrderStorageMockRecorder) GetAllUnfinishedAccrualOrderNums(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnfinishedAccrualOrderNums", reflect.TypeOf((*MockOrderStorage)(nil).GetAllUnfinishedAccrualOrderNums), arg0)
}

// GetBalanceByUserID mocks base method.
func (m *MockOrderStorage) GetBalanceByUserID(arg0 context.Context, arg1 string) (dto.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", arg0, arg1)
	ret0, _ := ret[0].(dto.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockOrderStorageMockRecorder) GetBalanceByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockOrderStorage)(nil).GetBalanceByUserID), arg0, arg1)
}

// GetOrdersByID mocks base method.
func (m *MockOrderStorage) GetOrdersByID(arg0 context.Context, arg1 string) ([]dto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByID", arg0, arg1)
	ret0, _ := ret[0].([]dto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByID indicates an expected call of GetOrdersByID.
func (mr *MockOrderStorageMockRecorder) GetOrdersByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByID", reflect.TypeOf((*MockOrderStorage)(nil).GetOrdersByID), arg0, arg1)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockOrderStorage) GetWithdrawalsByUserID(arg0 context.Context, arg1 string) ([]dto.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]dto.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockOrderStorageMockRecorder) GetWithdrawalsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockOrderStorage)(nil).GetWithdrawalsByUserID), arg0, arg1)
}

// SaveNewOrder mocks base method.
func (m *MockOrderStorage) SaveNewOrder(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewOrder indicates an expected call of SaveNewOrder.
func (mr *MockOrderStorageMockRecorder) SaveNewOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewOrder", reflect.TypeOf((*MockOrderStorage)(nil).SaveNewOrder), arg0, arg1, arg2)
}

// UpdateOrder mocks base method.
func (m *MockOrderStorage) UpdateOrder(arg0 context.Context, arg1, arg2 string, arg3 decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderStorageMockRecorder) UpdateOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderStorage)(nil).UpdateOrder), arg0, arg1, arg2, arg3)
}
