// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apolsh/yapr-gophermart/internal/gophermart/controller/httpserver (interfaces: GophermartService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/apolsh/yapr-gophermart/internal/gophermart/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockGophermartService is a mock of GophermartService interface.
type MockGophermartService struct {
	ctrl     *gomock.Controller
	recorder *MockGophermartServiceMockRecorder
}

// MockGophermartServiceMockRecorder is the mock recorder for MockGophermartService.
type MockGophermartServiceMockRecorder struct {
	mock *MockGophermartService
}

// NewMockGophermartService creates a new mock instance.
func NewMockGophermartService(ctrl *gomock.Controller) *MockGophermartService {
	mock := &MockGophermartService{ctrl: ctrl}
	mock.recorder = &MockGophermartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGophermartService) EXPECT() *MockGophermartServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockGophermartService) AddOrder(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockGophermartServiceMockRecorder) AddOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockGophermartService)(nil).AddOrder), arg0, arg1, arg2)
}

// AddUser mocks base method.
func (m *MockGophermartService) AddUser(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockGophermartServiceMockRecorder) AddUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockGophermartService)(nil).AddUser), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockGophermartService) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockGophermartServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGophermartService)(nil).Close))
}

// CreateWithdraw mocks base method.
func (m *MockGophermartService) CreateWithdraw(arg0 context.Context, arg1 string, arg2 dto.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdraw indicates an expected call of CreateWithdraw.
func (mr *MockGophermartServiceMockRecorder) CreateWithdraw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdraw", reflect.TypeOf((*MockGophermartService)(nil).CreateWithdraw), arg0, arg1, arg2)
}

// GetBalanceByUserID mocks base method.
func (m *MockGophermartService) GetBalanceByUserID(arg0 context.Context, arg1 string) (dto.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByUserID", arg0, arg1)
	ret0, _ := ret[0].(dto.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByUserID indicates an expected call of GetBalanceByUserID.
func (mr *MockGophermartServiceMockRecorder) GetBalanceByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByUserID", reflect.TypeOf((*MockGophermartService)(nil).GetBalanceByUserID), arg0, arg1)
}

// GetOrdersByUser mocks base method.
func (m *MockGophermartService) GetOrdersByUser(arg0 context.Context, arg1 string) ([]dto.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUser", arg0, arg1)
	ret0, _ := ret[0].([]dto.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUser indicates an expected call of GetOrdersByUser.
func (mr *MockGophermartServiceMockRecorder) GetOrdersByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUser", reflect.TypeOf((*MockGophermartService)(nil).GetOrdersByUser), arg0, arg1)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockGophermartService) GetWithdrawalsByUserID(arg0 context.Context, arg1 string) ([]dto.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]dto.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockGophermartServiceMockRecorder) GetWithdrawalsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockGophermartService)(nil).GetWithdrawalsByUserID), arg0, arg1)
}

// LoginUser mocks base method.
func (m *MockGophermartService) LoginUser(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockGophermartServiceMockRecorder) LoginUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockGophermartService)(nil).LoginUser), arg0, arg1, arg2)
}

// ParseJWTToken mocks base method.
func (m *MockGophermartService) ParseJWTToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWTToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWTToken indicates an expected call of ParseJWTToken.
func (mr *MockGophermartServiceMockRecorder) ParseJWTToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWTToken", reflect.TypeOf((*MockGophermartService)(nil).ParseJWTToken), arg0)
}

// StartAccrualInfoSynchronizer mocks base method.
func (m *MockGophermartService) StartAccrualInfoSynchronizer(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAccrualInfoSynchronizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAccrualInfoSynchronizer indicates an expected call of StartAccrualInfoSynchronizer.
func (mr *MockGophermartServiceMockRecorder) StartAccrualInfoSynchronizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAccrualInfoSynchronizer", reflect.TypeOf((*MockGophermartService)(nil).StartAccrualInfoSynchronizer), arg0, arg1)
}
